swirl()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num=5)
remainder(4,div=2)
args(remainder)
submit
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x+1}, 6)
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num=5)
remainder(4,div=4)
remainder(4,div=2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, 6)
info()
play()
nxt()
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, 6)
bay
info()
bye()
swirl
swirl()
evaluate(function(x){x+1}, 6)
bye()
swirl()
evaluate(function(x){x+1}, 6)
library(swirl)
swirl()
evaluate(function(x){x+1}, 6)
evaluate <- function(f,a){f(a)}
evaluate(function(x){x+1}, 6)
bye()
library(swirl)
swirl()
evaluate(function(x){x+1},6)
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, 6 )
evaluate( function(x){x+1} , 6 )
bye()
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
library(swirl)
swirl()
skip()
skip
skip()
info()
skip()
bye()
swirl()
skip()
evaluate(function(x){x+1}, 6)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
bye()
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
evaluate(function(x){x+1}, 6)
evaluate <- function(function,object)
evaluate <- function(function,object){}
evaluate <- function(function,object){function,object}
evaluate <- function(function,object){function(object)}
evaluate <- function(func,obj){func(obj)}
evaluate(mean,c(1,2,3,4,5))
evaluate(sum,c(4,5,6))
swirl()
miha
library(swirl)
swirl()
evaluate(function(x){x+1}, 6)
skip()
bye()
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags@amimate)
table(flags$amimate)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,6)
head(plant,10)
head(plants,10)
teil(plants,15)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample()
?sample
sample(1:6,4,replace=TRUE)
(1/6)^4
sample(1:6,4,replace=TRUE)
sample(1:20)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,0))
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips3
flips2
sum(flips2)
?rnorm
rnorm(10)
mean(100)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,10)
replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
ls()
class(plants)
bye()
swirl()
bye()
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
date -- YEAR-MONTH-DAY
date
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3,"%B %d %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot()
?plot
plot(cars,x-axis='speed',y-axis='dist')
plot(cars,xaxis='speed',yaxis='dist')
plot(x=cars$speed, y = cars$dist)
plot(x=cars$dist, y = cars$speed)
plot(x=cars$dist, y = cars$speed,xaxis="Speed")
plot(x=cars$dist, y = cars$speed,xlab="Speed")
plot(x=cars$speed, y = cars$dist,xlab="Speed")
plot(x=cars$speed, y = cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed, y = cars$dist,ylab="Stopping Distance")
plot(x=cars$speed, y = cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed, y = cars$dist,main="My Plot")
plot(cars,main="My Plot")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2
)
data(mtcars)
?boxplot
boxplot(formula=mpg~cyl,data=mtcars)
hist(mtcars$mpg)
cube <- function(x,n){x^3}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
## function to create and manage a matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
seti <- function(mss) m <<- mss
geti <- function() m
list(set = set, get = get,
set_inverse = seti,
get_inverse = geti)
}
## calculate the inverse matrix or getting cached data
cacheSolve <- function(x, ...) {
m <- x$get_inverse()
if(!is.null(m)) {
message("---")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$set_inverse(m)
m
}
m <- matrix(c(1,2,3),nrow=10,ncol=10)
?matrix
m<-as.matrix(1:100)
m
ncols(m)
ncol(m)
ncol(m) <- 10
library(datasets)
data(iris)
iris
iris$Sepal.Length[iris$Species=='virginica']
mean(iris$Sepal.Length[iris$Species=='virginica'])
apply(iris,1,mean)
colMeans(iris)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
r <- sapply(split(mtcars$hp, mtcars$cyl), mean)
r
r$8-r$4
r[1]
r[3]-r[1]
set.seed(1)
rpois(5, 2)
rnorm(10)
?ppois
?dpois
set.seed(1)
rpois(5, 2)
setwd("c:\\work")
outcome <- read.csv("outcome-of-care-measures.csv",colClasses="character")
head(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
source("rankall.R")
head(rankall("heart attack", 20), 10)
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
sibmit()
submit()
submit()
submit()
x <- rbind(c(1, -1/4), c(-1/4, 1))
source("cachematrix.R"")
source("cachematrix.R")
setwd("C:\\work\\GitHub\\ProgrammingAssignment2")
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
